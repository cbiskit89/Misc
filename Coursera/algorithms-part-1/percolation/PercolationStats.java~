public class PercolationStats {
    private double[] openSites;
    private double mean;
    private double stddev;
    private double confidenceLo;
    private double confidenceHi;
    
    public PercolationStats(int N, int T) {
        // perform T independent experiments on an N-by-N grid
        if (N <= 0 || T <= 0) { throw new java.lang.IllegalArgumentException("N and T must be greater than 0."); }
        
        double[] openSites = new double[T];
        
        for (int i = 0; i < T; i++) {
            Percolation percolation = new Percolation(N);
            
            while (!percolation.percolates()) {
                int x = StdRandom.uniform(N) + 1;
                int y = StdRandom.uniform(N) + 1;
                if (!percolation.isOpen(x, y)) {
                    percolation.open(x, y);
                    openSites[i]++;
                }
            }
            openSites[i] = openSites[i] / (N * N);
        }
        
        mean = StdStats.mean(openSites);
        stddev = StdStats.stddev(openSites);
        confidenceLo = (mean - ((1.96 * stddev)) / Math.sqrt(T));
        confidenceHi = (mean + ((1.96 * stddev)) / Math.sqrt(T));
    }
    
    public double mean() {
        // sample mean of percolation threshold
        return mean;
    }
    
    public double stddev() {
        // sample standard deviation of percolation threshold
        return stddev;
    }
    
    public double confidenceLo() {
        // low  endpoint of 95% confidence interval
        return confidenceLo;
    }
    
    public double confidenceHi() {
        // high endpoint of 95% confidence interval
        return confidenceHi;
    }
    
    public static void main(String[] args) {
        // test client
        if (args.length != 2) { throw new IllegalArgumentException("You must have two arguments, N and T."); }
        int n = 0, t = 0;
        try {
            n = Integer.parseInt(args[0]);
            t = Integer.parseInt(args[1]);
        }
        catch (NumberFormatException e) {
            System.out.println("Arguments N and T must be integers!.");
        }
        if (n <= 0 || t <= 0) { throw new IllegalArgumentException("N and T must be greater than 0."); }
        PercolationStats percStats = new PercolationStats(n, t);
        System.out.println("mean                    = " + percStats.mean());
        System.out.println("stddev                  = " + percStats.stddev());
        System.out.println("95% confidence interval = " + percStats.confidenceLo() + ", " + percStats.confidenceHi());
    }
}